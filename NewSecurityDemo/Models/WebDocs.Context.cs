//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NewSecurityDemo.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WebDocsEntities : DbContext
    {
        public WebDocsEntities()
            : base("name=WebDocsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AspNetRole> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaim> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogin> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUser> AspNetUsers { get; set; }
        public virtual DbSet<EmailSetting> EmailSettings { get; set; }
        public virtual DbSet<FileCategory> FileCategories { get; set; }
        public virtual DbSet<File> Files { get; set; }
        public virtual DbSet<FileSharedWithUser> FileSharedWithUsers { get; set; }
        public virtual DbSet<LookupTable_FileCategories> LookupTable_FileCategories { get; set; }
        public virtual DbSet<LookupTable_FileStatuses> LookupTable_FileStatuses { get; set; }
        public virtual DbSet<LookupTable_ShareStatues> LookupTable_ShareStatues { get; set; }
        public virtual DbSet<View_PrivateDocView_AllSharedPrivateFiles> View_PrivateDocView_AllSharedPrivateFiles { get; set; }
        public virtual DbSet<View_UserDocs_AllUserCreatedDocs> View_UserDocs_AllUserCreatedDocs { get; set; }
        public virtual DbSet<View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile> View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile { get; set; }
        public virtual DbSet<LookupTableNotificationType> LookupTableNotificationTypes { get; set; }
        public virtual DbSet<Notification> Notifications { get; set; }
        public virtual DbSet<UserThatDownloadedFile> UserThatDownloadedFiles { get; set; }
    
        public virtual ObjectResult<View_PrivateDocView_AllSharedPrivateFiles> PrivateDocs_R_GetAllPrivateSharedUserFiles(string currentlyLoggedingUserID)
        {
            var currentlyLoggedingUserIDParameter = currentlyLoggedingUserID != null ?
                new ObjectParameter("CurrentlyLoggedingUserID", currentlyLoggedingUserID) :
                new ObjectParameter("CurrentlyLoggedingUserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<View_PrivateDocView_AllSharedPrivateFiles>("PrivateDocs_R_GetAllPrivateSharedUserFiles", currentlyLoggedingUserIDParameter);
        }
    
        public virtual ObjectResult<View_PrivateDocView_AllSharedPrivateFiles> PrivateDocs_R_GetAllPrivateSharedUserFiles(string currentlyLoggedingUserID, MergeOption mergeOption)
        {
            var currentlyLoggedingUserIDParameter = currentlyLoggedingUserID != null ?
                new ObjectParameter("CurrentlyLoggedingUserID", currentlyLoggedingUserID) :
                new ObjectParameter("CurrentlyLoggedingUserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<View_PrivateDocView_AllSharedPrivateFiles>("PrivateDocs_R_GetAllPrivateSharedUserFiles", mergeOption, currentlyLoggedingUserIDParameter);
        }
    
        public virtual ObjectResult<View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile> PublicDocs_R_GetMostRecentFileVersion()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile>("PublicDocs_R_GetMostRecentFileVersion");
        }
    
        public virtual ObjectResult<View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile> PublicDocs_R_GetMostRecentFileVersion(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile>("PublicDocs_R_GetMostRecentFileVersion", mergeOption);
        }
    
        public virtual ObjectResult<View_UserDocs_AllUserCreatedDocs> UserDocs_R_GetAllUserCreatedDocs(string userID)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<View_UserDocs_AllUserCreatedDocs>("UserDocs_R_GetAllUserCreatedDocs", userIDParameter);
        }
    
        public virtual ObjectResult<View_UserDocs_AllUserCreatedDocs> UserDocs_R_GetAllUserCreatedDocs(string userID, MergeOption mergeOption)
        {
            var userIDParameter = userID != null ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<View_UserDocs_AllUserCreatedDocs>("UserDocs_R_GetAllUserCreatedDocs", mergeOption, userIDParameter);
        }
    
        public virtual ObjectResult<View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile> PublicDocs_R_GetSelectedFileHistory(Nullable<int> fileID)
        {
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile>("PublicDocs_R_GetSelectedFileHistory", fileIDParameter);
        }
    
        public virtual ObjectResult<View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile> PublicDocs_R_GetSelectedFileHistory(Nullable<int> fileID, MergeOption mergeOption)
        {
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile>("PublicDocs_R_GetSelectedFileHistory", mergeOption, fileIDParameter);
        }
    
        public virtual int Files_U_SetFileStatus(Nullable<int> fileID, Nullable<int> fileLookupStatusID)
        {
            var fileIDParameter = fileID.HasValue ?
                new ObjectParameter("FileID", fileID) :
                new ObjectParameter("FileID", typeof(int));
    
            var fileLookupStatusIDParameter = fileLookupStatusID.HasValue ?
                new ObjectParameter("FileLookupStatusID", fileLookupStatusID) :
                new ObjectParameter("FileLookupStatusID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Files_U_SetFileStatus", fileIDParameter, fileLookupStatusIDParameter);
        }
    }
}
