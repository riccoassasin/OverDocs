@model IEnumerable<NewSecurityDemo.Models.View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile>
@using Microsoft.AspNet.Identity;
@using OverDocsModels.DecisionModels.PublicDocuments.IsAvaiable;
@using SystemLogic.DescisionClasses.PublicViewedFiles.AvailableFiles;
@using SystemLogic.DescisionClasses.PublicViewedFiles.LockedFiles;
@using SystemLogic;
@using SystemLogic.DescisionClasses.PublicViewedFiles;
@using Common.Enum.SystemLogicEnum;
@using SystemLogic.Interfaces;
@using Common.Enum.DBLookupEnum;
@using OverDocsModels.DecisionModels.PublicDocuments.IsLocked;
@using SystemLogic.DescisionClasses.PublicViewedFiles.LockedFiles;
@using Common.Enum.DBLookupEnum;
@{
    ViewBag.Title = "PublicDocDisplay";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*<p>
        @Html.ActionLink("Create New", "Create")
    </p>*@
<br />
@{
    string AllFileID = "";
    string UserID_OfUserCurrentlyLoggedIn = User.Identity.GetUserId();
}

<div class="panel panel-primary">
    <div class="panel-heading"><h4>Repository - Public Documents</h4></div>
    <div class="panel-body">
        <div class="table-responsive">
            <table class="table-condensed table-hover ">
                <thead>
                    <tr>
                        <th>
                            @Html.Label("Ref#")
                        </th>
                        <th>
                            @Html.Label("File Name")

                        </th>
                        <th>
                            @Html.Label("Size(kb)")

                        </th>
                        <th>
                            @Html.Label("File Owner")

                        </th>
                        <th>
                            @Html.Label("Last Modified")
                        </th>
                        <th>
                            @Html.Label("File Status")

                        </th>
                        <th>
                            @Html.Label("Shared Status")

                        </th>
                        <th>
                            @Html.Label("Version")

                        </th>
                        <th>Options</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.FileID)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.FullFileName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.FileSize)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.NameOfFileOwner)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DateCreated)
                            </td>
                            <td id="lblFileStatus_@item.FileID">
                                @Html.DisplayFor(modelItem => item.CurrentFileStatus)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.CurrentFileShareStatus)
                            </td>
                            <td class="text-center">
                                @Html.DisplayFor(modelItem => item.CurrentVersionNumber)
                            </td>
                            <td>

                                @{

                                    IDecsions Decision;

                                    switch (item.FileLookupStatusID)
                                    {
                                        case (int)FileViewStatus.FileIsAvailable:
                                            Decision = new PublicViewAvailableFile(UserID_OfUserCurrentlyLoggedIn, new PublicDocsAvailableDataModel()
                                            {
                                                FileID = item.FileID,
                                                FileOwnerID = item.UserIDOfFileOwner,
                                                FileStatusID = item.FileLookupStatusID,
                                                FileSharedStautusID = item.FileShareStatusID,
                                                FileID_FilesSharedWithUser = item.ListOfUserIDThatTheFileISsharedWith
                                            });
                                            break;
                                        case (int)FileViewStatus.FileIsLocked:
                                            Decision = new PublicViewLockedFile(UserID_OfUserCurrentlyLoggedIn, new PublicDocsLockedDataModel()
                                            {

                                                FileID = item.FileID,
                                                FileOwnerID = item.UserIDOfFileOwner,
                                                FileStatusID = item.FileLookupStatusID,
                                                FileSharedStautusID = item.FileShareStatusID,
                                                FileID_FilesSharedWithUser = item.ListOfUserIDThatTheFileISsharedWith,
                                                UserIDOfthePersonThatDownloadedTheFile = item.IdOfUserThatDownloadedTheFile
                                            });
                                            break;


                                        default:
                                            Decision = null;
                                            break;
                                    }

                                    <table style=" border: none;">
                                        <tr>
                                            <td>
                                                @Html.ActionLink("History", "Edit", new { /* id=item.PrimaryKey */ })
                                            </td>
                                            <td>|</td>
                                            <td>
                                                @if (Decision != null)
                                                {
                                                    switch (Decision.FinalDecision)
                                                    {
                                                        case ControlTypes.Download:

                                                            <a href="#" onclick="showModal(@item.FileID,'@item.FullFileName', '@UserID_OfUserCurrentlyLoggedIn' )">Download</a>
                                                            @*@Html.ActionLink("Download", "DownLoadSelectedFile", "DownLoadFile", new { fileID = item.FileID }, null) ;*@
                                                            break;
                                                        case ControlTypes.UploadFileNotification:
                                                            @Html.ActionLink("Notify to Upload", "DownLoadSelectedFile", "DownLoadFile", new { fileID = item.FileID }, null)

                                                            break;
                                                        case ControlTypes.RequestPermissionNotifications:
                                                            @*@Html.ActionLink("Request Permission", "DownLoadSelectedFile", "DownLoadFile", new { fileID = item.FileID }, null)*@
                                                            <a href="#" onclick="sendRequestNotification(@item.FileID,@Convert.ToInt32(NotificationTypes.FileRequest),'@UserID_OfUserCurrentlyLoggedIn','@item.UserIDOfFileOwner')">Request Permission</a>
                                                            break;
                                                        default:
                                                            break;

                                                    }
                                                }
                                                else
                                                {
                                                    @Html.Label("No Links Avaiable!")
                                                }

                                            </td>
                                        </tr>
                                    </table>




                                }
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="panel-footer">
        <!---->

        <ul class="pager">
            <li class="previous"><a href="#">Previous</a></li>
            <li class="next"><a href="#">Next</a></li>
        </ul>


    </div>

</div>
<table>
    <tr>
        <td>
            <ul class="pagination">
                <li><a href="#">1</a></li>
                <li><a href="#">2</a></li>
                <li><a href="#">3</a></li>
                <li><a href="#">4</a></li>
                <li><a href="#">5</a></li>
            </ul>
        </td>
        <td></td>
    </tr>
</table>


<button type="button" class="btn btn-info btn-lg" data-toggle="modal" data-target="#Download_Notification_Modal">Open Modal</button>

<div id="Download_Notification_Modal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">File Download</h4>
            </div>
            <div class="modal-body">
                <p>You Are about to download <u><b><span id="FileNameToReplace"></span></b></u>.</p>
                <p>NB! A notification will be sent to all users that this file is shared with. </p>
                <P>Once the file has been downloaded please NOTE, the file will be locked for all users untill the new version of this file is uploaded by you.  </P>
                <p>
                    <b>
                        Click download to proceed <b>
                            <a href="#" class="btn btn-warning" onclick="DownloadFile()">
                                Download
                            </a> Else Click Close to cancel.


                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>

<input type="button" class="btn" value="Teste Buttoin" onclick="test();" />
@using (Html.BeginForm("DownLoadSelectedFile", "DownLoadFile", FormMethod.Post))
{
    <input type="hidden" id="FileID" name="FileID" />
    <input type="hidden" id="UserIDOfPersonThatDownloadedTheFile" name="UserIDOfPersonThatDownloadedTheFile" />
    <input type="submit" id="btnDownload" value="Download" style="display:none" />
}
@using (Html.BeginForm("PublicDocDisplay", "PublicDocs", FormMethod.Get))
{
    <input type="submit" id="btnRefreshPage" value="" style="display:none" />
}
<script type="text/javascript">

    function showModal(FileID, FileName, UserIDOfPersonThatDownloadedTheFile) {
        
        $("#FileNameToReplace").html(FileName)
        $("#FileID").val(FileID);
        $("#UserIDOfPersonThatDownloadedTheFile").val(UserIDOfPersonThatDownloadedTheFile);
        $("#Download_Notification_Modal").modal("show");
    }

    function DownloadFile() {

        $("#btnDownload")[0].click();
        $("#Download_Notification_Modal").modal("hide");
        //$("#btnRefreshPage")[0].click();
    }

    function sendRequestNotification(FileID, NotificationTypeID, IDOFPersonLoggedOn, IDOfTheFileOwner) {


        $.ajax({
            type: "POST",
            url: '@Url.Action("SendRequestNotification", "Notifications")',
            data: '{ FileID: "' + FileID + '", NotificationTypeID: "' + NotificationTypeID + '", IDOFPersonLoggedOn: "' + IDOFPersonLoggedOn + '",IDOfTheFileOwner: "' + IDOfTheFileOwner + '" }',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: successFunc,
            error: function (xhr, textStatus, error) {
                alert('Unable to send request - error: ' + error); 

            }
        });

        function successFunc(data, status) {
            alert(data);
        }


    }
</script>





