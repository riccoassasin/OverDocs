@*@model IEnumerable<NewSecurityDemo.Models.View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile>*@
@using Microsoft.AspNet.Identity;
@using OverDocsModels.DecisionModels.PublicDocuments.IsAvaiable;
@using SystemLogic.DescisionClasses.PublicViewedFiles.AvailableFiles;
@using SystemLogic.DescisionClasses.PublicViewedFiles.LockedFiles;
@using SystemLogic;
@using SystemLogic.DescisionClasses.PublicViewedFiles;
@using Common.Enum.SystemLogicEnum;
@using SystemLogic.Interfaces;
@using Common.Enum.DBLookupEnum;
@using OverDocsModels.DecisionModels.PublicDocuments.IsLocked;
@using SystemLogic.DescisionClasses.PublicViewedFiles.LockedFiles;
@using Common.Enum.DBLookupEnum;
@model PagedList.IPagedList<NewSecurityDemo.Models.View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile>
@using PagedList.Mvc;
@using Common.Formatters;


@{
    ViewBag.Title = "PublicDocDisplay";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    string UserID_OfUserCurrentlyLoggedIn = User.Identity.GetUserId();
}
<br />
<div class="panel panel-primary">
    <div class="panel-heading">
        <div class="row">
            <div class="col-lg-3"><h4>Repository - Public Documents</h4></div>
            <div class="col-lg-7">

                @using (Html.BeginForm("PublicDocDisplay", "PublicDocs", FormMethod.Get, new { @class = "form-group" }))
                {
                    <div class="=row">
                        <div class="col-lg-3">
                            <h4>Find by name:</h4>
                        </div>
                        <div class="col-lg-5">
                            @Html.TextBox("SearchString", "", new { @class = "form-control" })
                        </div>
                        <div class="col-lg-3 "><input type="submit" id="btnSearchFileName" class="btn btn-default" value="Search File Name" /></div>
                        <div class="col-lg-1">
                            <a href="#" class="btn btn-default">
                                <span class="glyphicon glyphicon-refresh" onclick="ClearSearch();"></span>
                            </a>
                        </div>

                    </div>


                }

                <script type="text/javascript">
                    function ClearSearch() {


                        $("#SearchString").val("");
                        $("#btnSearchFileName")[0].click();
                    }
                </script>
            </div>
        </div>


    </div>
    <div class="panel-body">
        <div class="table-responsive">
            <table class="table-condensed table-hover table-striped">
                <thead>
                    <tr>
                        <th class="text-nowrap">

                            @Html.ActionLink("Ref#", "PublicDocDisplay", new { sortOrder = ViewBag.FileIDSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">

                            @Html.ActionLink("File Name", "PublicDocDisplay", new { sortOrder = ViewBag.NameSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("File Size", "PublicDocDisplay", new { sortOrder = ViewBag.FileSizeSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("File Owner", "PublicDocDisplay", new { sortOrder = ViewBag.NameOfFileOwnerSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">
                            @Html.Label("Updated By")
                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("Last Modified", "PublicDocDisplay", new { sortOrder = ViewBag.DateSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("File Status", "PublicDocDisplay", new { sortOrder = ViewBag.CurrentFileStatusSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("Shared Status", "PublicDocDisplay", new { sortOrder = ViewBag.CurrentFileShareStatusSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th class="text-nowrap">
                            @Html.ActionLink("Version", "PublicDocDisplay", new { sortOrder = ViewBag.CurrentVersionNumberSortParm, currentFilter = ViewBag.CurrentFilter })
                        </th>
                        <th>Options</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        if (Model.Count() > 0)
                        {
                            foreach (var item in Model)
                            {
                                <tr>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.FileID)
                                    </td>
                                    <td>
                                        @Html.DisplayFor(modelItem => item.FullFileName)
                                    </td>
                                    <td>
                                        <div class="text-nowrap">
                                            @FileSize.ToFileSize(@item.FileSize)
                                        </div>
                                    </td>
                                    <td>
                                        <div class="text-nowrap">
                                            @Html.DisplayFor(modelItem => item.NameOfFileOwner)
                                        </div>
                                    </td>
                                    <td>
                                        <div class="text-nowrap">
                                            @Html.DisplayFor(modelItem => item.NameOfUserThatLastUpdatedFile)
                                        </div>
                                    </td>
                                    <td>
                                        <div class="text-nowrap">
                                            @Html.DisplayFor(modelItem => item.DateCreated)
                                        </div>
                                    </td>
                                    <td class="text-center" id="lblFileStatus_@item.FileID">
                                        @Html.DisplayFor(modelItem => item.CurrentFileStatus)
                                    </td>
                                    <td class="text-center">
                                        @Html.DisplayFor(modelItem => item.CurrentFileShareStatus)
                                    </td>
                                    <td class="text-center">
                                        @Html.DisplayFor(modelItem => item.CurrentVersionNumber)
                                    </td>
                                    <td>

                                        @{

                                            IDecsions Decision;

                                            switch (item.FileLookupStatusID)
                                            {
                                                case (int)FileViewStatus.FileIsAvailable:
                                                    Decision = new PublicViewAvailableFile(UserID_OfUserCurrentlyLoggedIn, new PublicDocsAvailableDataModel()
                                                    {
                                                        FileID = item.FileID,
                                                        FileOwnerID = item.UserIDOfFileOwner,
                                                        FileStatusID = item.FileLookupStatusID,
                                                        FileSharedStautusID = item.FileShareStatusID,
                                                        FileID_FilesSharedWithUser = item.ListOfUserIDThatTheFileISsharedWith
                                                    });
                                                    break;
                                                case (int)FileViewStatus.FileIsLocked:
                                                    Decision = new PublicViewLockedFile(UserID_OfUserCurrentlyLoggedIn, new PublicDocsLockedDataModel()
                                                    {

                                                        FileID = item.FileID,
                                                        FileOwnerID = item.UserIDOfFileOwner,
                                                        FileStatusID = item.FileLookupStatusID,
                                                        FileSharedStautusID = item.FileShareStatusID,
                                                        FileID_FilesSharedWithUser = item.ListOfUserIDThatTheFileISsharedWith,
                                                        UserIDOfthePersonThatDownloadedTheFile = item.IdOfUserThatDownloadedTheFile
                                                    });
                                                    break;


                                                default:
                                                    Decision = null;
                                                    break;
                                            }

                                            <table style=" border: none;">
                                                <tr>
                                                    <td>
                                                        [<a href="javascript:void(0);" onclick="showHistory(@item.FileID,'@item.FullFileName');" class="showHistory">History</a>]
                                                    </td>
                                                    <td>&nbsp;</td>
                                                    <td>
                                                        <div class="text-nowrap">
                                                            [@if (Decision != null)
                                                            {
                                                                switch (Decision.FinalDecision)
                                                                {
                                                                    case ControlTypes.Download:
                                                                        <a href="#" onclick="showModal(@item.FileID,'@item.FullFileName', '@UserID_OfUserCurrentlyLoggedIn' )">Download</a>
                                                                        @*@Html.ActionLink("Download", "DownLoadSelectedFile", "DownLoadFile", new { fileID = item.FileID }, null) ;*@
                                                                        break;
                                                                    case ControlTypes.UploadFileNotification:
                                                                        @Html.ActionLink("Notify to Upload", "DownLoadSelectedFile", "DownLoadFile", new { fileID = item.FileID }, null)

                                                                        break;
                                                                    case ControlTypes.RequestPermissionNotifications:
                                                                        @*@Html.ActionLink("Request Permission", "DownLoadSelectedFile", "DownLoadFile", new { fileID = item.FileID }, null)*@
                                                                        <a href="#" onclick="sendRequestNotification(@item.FileID,@Convert.ToInt32(NotificationTypes.FileRequest),'@UserID_OfUserCurrentlyLoggedIn','@item.UserIDOfFileOwner')">Request Permission</a>
                                                                        break;
                                                                    default:
                                                                        break;

                                                                }
                                                            }
                                                            else
                                                            {
                                                                @Html.Label("No Links Avaiable!")
                                                            }]
                                                        </div>
                                                    </td>
                                                </tr>
                                            </table>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="9"><div class="well text-center text-warning">No Files Found!!</div></td></tr>
                        }
                    }

                </tbody>
            </table>
        </div>
    </div>
    <div class="panel-footer">

        <table class="">
            <tr>
                <td>Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount</td>
                <td>&nbsp;</td>
                <td>
                    @Html.PagedListPager(Model, page => Url.Action("PublicDocDisplay", new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }))
                </td>
            </tr>
        </table>

    </div>

</div>

<!-- Modal Sections-->
<div class="modal fade" id="ShowFileHistoryModal" role="dialog">
    <div class="modal-dialog modal-lg panel-primary">

        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">File History for: [<span id="HistoryForFile_FileFullName"></span>]</h4>
            </div>
            <div class="modal-body">
                <div id="ShowFileHistory"></div>
            </div>
            <div class="modal-footer">
                <button id="closeFileHistory" type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>





<button type="button" class="btn btn-info btn-lg hidden" data-toggle="modal" data-target="#Download_Notification_Modal">Open Modal</button>

<div id="Download_Notification_Modal" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">History For - <span id="CurrentFileHistoryFileName"></span></h4>
            </div>
            <div class="modal-body">
                <p>You Are about to download <u><b><span id="FileNameToReplace"></span></b></u>.</p>
                <p>NB! A notification will be sent to all users that this file is shared with. </p>
                <P>Once the file has been downloaded please NOTE, the file will be locked for all users untill the new version of this file is uploaded by you.  </P>
                <p>
                    <b>
                        Click download to proceed <b>
                            <a href="#" class="btn btn-warning" onclick="DownloadFile()">
                                Download
                            </a> Else Click Close to cancel.


                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>

    </div>
</div>


@section scripts {

    <script>

        function showHistory(FileID, FileFullName) {

            $("#HistoryForFile_FileFullName").html(FileFullName);
            var ajaxCallURL = '@Url.Action("PublicDoc_SelectedFile_HistoryPartialView", "PublicDocs")';
            var options = {
                "backdrop": "static",
                keyboard: true
            };
            $.ajax({
                type: "POST",
                url: ajaxCallURL,
                contentType: "application/json; charset=utf-8",
                data: '{FileID: ' + FileID + '}',
                datatype: "json",
                success: function (data) {
                    //debugger;
                    $('#ShowFileHistory').html(data);
                    $('#ShowFileHistoryModal').modal(options);
                    $('#ShowFileHistoryModal').modal('show');
                },
                error: function () {
                    alert("Content load failed.");
                }
            });

        }


        $(function () {
            $("#closeFileHistory").click(function () {
                //debugger;
                $('#ShowFileHistoryModal').modal('hide');
            });
        });

        $("#Download_Notification_Modal").on('hidden.bs.modal', function () {
            
            $("#btnRefreshPage")[0].click();
        });
    </script>
}

@using (Html.BeginForm("DownLoadSelectedFile", "DownLoadFile", FormMethod.Post))
{
    <input type="hidden" id="FileID" name="FileID" />
    <input type="hidden" id="UserIDOfPersonThatDownloadedTheFile" name="UserIDOfPersonThatDownloadedTheFile" />
    <input type="submit" id="btnDownload" value="Download" style="display:none" />
}
@using (Html.BeginForm("PublicDocDisplay", "PublicDocs", FormMethod.Get))
{
    <input type="submit" id="btnRefreshPage" value="" style="display:none" />
}
<script type="text/javascript">

    function showModal(FileID, FileName, UserIDOfPersonThatDownloadedTheFile) {

        $("#FileNameToReplace").html(FileName)
        $("#FileID").val(FileID);
        $("#UserIDOfPersonThatDownloadedTheFile").val(UserIDOfPersonThatDownloadedTheFile);
        $("#Download_Notification_Modal").modal("show");
    }

    function DownloadFile() {

               $("#btnDownload")[0].click();
        //$("#Download_Notification_Modal").modal("hide");
        //$("#btnRefreshPage")[0].click();
    }

    function sendRequestNotification(FileID, NotificationTypeID, IDOFPersonLoggedOn, IDOfTheFileOwner) {
        $.ajax({
            type: "POST",
            url: '@Url.Action("SendRequestNotification", "Notifications")',
            data: '{ FileID: "' + FileID + '", NotificationTypeID: "' + NotificationTypeID + '", IDOFPersonLoggedOn: "' + IDOFPersonLoggedOn + '",IDOfTheFileOwner: "' + IDOfTheFileOwner + '" }',
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            success: successFunc,
            error: function (xhr, textStatus, error) {
                alert('Unable to send request - error: ' + error);

            }
        });

        function successFunc(data, status) {
            alert(data);
        }


    }
</script>





