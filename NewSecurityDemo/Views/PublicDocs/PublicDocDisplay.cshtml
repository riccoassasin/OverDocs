@model IEnumerable<NewSecurityDemo.Models.View_PublicDocView_AllFilesWithOwnerAndUserThatLastUpdatedFile>
@using Microsoft.AspNet.Identity;
@using OverDocsModels.DecisionModels.PublicDocuments.IsAvaiable;
@using SystemLogic.DescisionClasses.PublicViewedFiles.AvailableFiles;
@using SystemLogic.DescisionClasses.PublicViewedFiles.LockedFiles;
@using SystemLogic;
@using SystemLogic.DescisionClasses.PublicViewedFiles;
@using Common.Enum.SystemLogicEnum;
@using SystemLogic.Interfaces;
@using Common.Enum.DBLookupEnum;
@using OverDocsModels.DecisionModels.PublicDocuments.IsLocked;
@using SystemLogic.DescisionClasses.PublicViewedFiles.LockedFiles;
@{
    ViewBag.Title = "PublicDocDisplay";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@*<p>
        @Html.ActionLink("Create New", "Create")
    </p>*@
<br />
@{
    string AllFileID = "";
    string UserID_OfUserCurrentlyLoggedIn = User.Identity.GetUserId();
}

<div class="panel panel-primary">
    <div class="panel-heading"><h4>Repository - Public Documents</h4></div>
    <div class="panel-body">
        <div class="table-responsive">
            <table class="table-condensed table-hover ">
                <thead>
                    <tr>
                        <th>
                            @Html.Label("Ref#")
                        </th>
                        <th>
                            @Html.Label("File Name")

                        </th>
                        <th>
                            @Html.Label("Size(kb)")

                        </th>
                        <th>
                            @Html.Label("File Owner")

                        </th>
                        <th>
                            @Html.Label("Last Modified")
                        </th>

                        @*<th>
                                @Html.DisplayNameFor(model => model.UserIDOfFileOwner)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.UserIDOfLastUploaded)
                            </th>*@
                        <th>
                            @Html.Label("File Status")

                        </th>
                        @*<th>
                                @Html.DisplayNameFor(model => model.FileLookupStatusID)
                            </th>*@
                        <th>
                            @Html.Label("Shared Status")

                        </th>
                        @*<th>
                                @Html.DisplayNameFor(model => model.FileShareStatusID)
                            </th>*@
                        @*<th>
                                @Html.Label("File Type")
                            </th>*@
                        @*<th>
                                @Html.DisplayNameFor(model => model.FileName)
                            </th>
                            <th>
                                @Html.DisplayNameFor(model => model.FileExtension)
                            </th>*@


                        <th>
                            @Html.Label("Version")

                        </th>

                        @*<th>
                                @Html.Label("Updated By")
                            </th>*@
                        <th>Options</th>
                    </tr>
                </thead>
                <tbody>



                    @foreach (var item in Model)
                    {

                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.FileID)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.FullFileName)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.FileSize)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.NameOfFileOwner)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.DateCreated)
                            </td>

                            @*<td>
                                    @Html.DisplayFor(modelItem => item.UserIDOfFileOwner)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.UserIDOfLastUploaded)
                                </td>*@
                            <td>
                                @Html.DisplayFor(modelItem => item.CurrentFileStatus)
                            </td>
                            @*<td>
                                    @Html.DisplayFor(modelItem => item.FileLookupStatusID)
                                </td>*@
                            <td>
                                @Html.DisplayFor(modelItem => item.CurrentFileShareStatus)
                            </td>
                            @*<td>
                                    @Html.DisplayFor(modelItem => item.FileShareStatusID)
                                </td>*@
                            @*<td>
                                    @Html.DisplayFor(modelItem => item.FileType)
                                </td>*@
                            @*<td>
                                    @Html.DisplayFor(modelItem => item.FileName)
                                </td>
                                <td>
                                    @Html.DisplayFor(modelItem => item.FileExtension)
                                </td>*@


                            <td class="text-center">
                                @Html.DisplayFor(modelItem => item.CurrentVersionNumber)
                            </td>

                            @*<td>
                                    @Html.DisplayFor(modelItem => item.NameOfUserThatLastUpdatedFile)
                                </td>*@
                            <td>

                                @{

                                    IDecsions Decision;

                                    switch (item.FileLookupStatusID)
                                    {
                                        case (int)FileViewStatus.FileIsAvailable:
                                            Decision = new PublicViewAvailableFile(UserID_OfUserCurrentlyLoggedIn, new PublicDocsAvailableDataModel()
                                            {
                                                FileID = item.FileID,
                                                FileOwnerID = item.UserIDOfFileOwner,
                                                FileStatusID = item.FileLookupStatusID,
                                                FileSharedStautusID = item.FileShareStatusID,
                                                FileID_FilesSharedWithUser = item.ListOfUserIDThatTheFileISsharedWith
                                            });
                                            break;
                                        case (int)FileViewStatus.FileIsLocked:
                                            Decision = new PublicViewLockedFile(UserID_OfUserCurrentlyLoggedIn, new PublicDocsLockedDataModel()
                                            {

                                                FileID = item.FileID,
                                                FileOwnerID = item.UserIDOfFileOwner,
                                                FileStatusID = item.FileLookupStatusID,
                                                FileSharedStautusID = item.FileShareStatusID,
                                                FileID_FilesSharedWithUser = item.ListOfUserIDThatTheFileISsharedWith
                                            });
                                            break;


                                        default:
                                            Decision = null;
                                            break;
                                    }




                                    <table style=" border: none;">
                                        <tr>
                                            <td >
                                                @Html.ActionLink("History", "Edit", new { /* id=item.PrimaryKey */ })
                                            </td>
                                            <td>|</td>
                                            <td>
                                                @{

                                                    switch (Decision.FinalDecision) 
                                                    {
                                                        case ControlTypes.Download:

                                                            @Html.ActionLink("Download", "DownLoadSelectedFile", "DownLoadFile", new { fileID = item.FileID }, null) ;
                                                            break;
                                                        case ControlTypes.UploadFileNotification:
                                                            @Html.ActionLink("Notify to Upload", "DownLoadSelectedFile", "DownLoadFile", new { fileID = item.FileID }, null)
                                                            break;
                                                        case ControlTypes.RequestPermissionNotifications:
                                                            @Html.ActionLink("Request Permission", "DownLoadSelectedFile", "DownLoadFile", new { fileID = item.FileID }, null)
                                                            break;
                                                        default:
                                                            break;

                                                    }
                                                }
                                            </td>
                                        </tr>
                                    </table>




                                }

                                @{
                                    //if (item.FileShareStatusID == (int)Common.Enum.DBLookupEnum.FileSharedStatus.Private)
                                    //{
                                    //    if (AllFileID.Length > 0)
                                    //    {
                                    //        AllFileID += "|";
                                    //    }
                                    //    SystemLogic.DescisionClasses.PublicViewAvailableFile x = new SystemLogic.DescisionClasses.PublicViewAvailableFile("",null);

                                    //    AllFileID += item.FileID;
                                    //}






                                }

                                @*@Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })*@
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
    <div class="panel-footer">
        <!---->

        <ul class="pager">
            <li class="previous"><a href="#">Previous</a></li>
            <li class="next"><a href="#">Next</a></li>
        </ul>


    </div>

</div>
<table>
    <tr>
        <td>
            <ul class="pagination">
                <li><a href="#">1</a></li>
                <li><a href="#">2</a></li>
                <li><a href="#">3</a></li>
                <li><a href="#">4</a></li>
                <li><a href="#">5</a></li>
            </ul>
        </td>
        <td></td>
    </tr>
</table>





